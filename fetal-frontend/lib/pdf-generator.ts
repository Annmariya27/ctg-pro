import jsPDF from "jspdf"
import { PRETTY_FEATURE_NAMES } from "@/components/ShapChart"

interface ResultData {
  class_index: number
  probability: number
  patientName: string
  patientId: string
  shap_values: { feature: string; value: number }[]
}

const CLASS_STATUS_MAP = {
  1: { text: "Normal", color: [21, 128, 61] }, // RGB for green-700
  2: { text: "Suspect", color: [202, 138, 4] }, // RGB for yellow-600
  3: { text: "Pathological", color: [185, 28, 28] }, // RGB for red-700
}

export const generateReportPdf = (resultData: ResultData) => {
  const doc = new jsPDF("p", "mm", "a4")
  const pageHeight = doc.internal.pageSize.getHeight()
  const pageWidth = doc.internal.pageSize.getWidth()
  const margin = 15
  let y = margin

  // --- Header ---
  doc.setFontSize(22)
  doc.setFont("helvetica", "bold")
  doc.text("Fetal Health Analysis Report", pageWidth / 2, y, { align: "center" })
  y += 8

  doc.setFontSize(10)
  doc.setFont("helvetica", "normal")
  doc.setTextColor(100)
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, pageWidth / 2, y, { align: "center" })
  y += 10

  doc.setDrawColor(220)
  doc.line(margin, y, pageWidth - margin, y)
  y += 15

  // --- Patient & Result Summary ---
  doc.setFontSize(12)
  doc.setFont("helvetica", "bold")
  doc.setTextColor(55, 65, 81)
  doc.text("Patient Information", margin, y)
  doc.text("Analysis Result", pageWidth / 2 + 10, y)
  y += 6

  doc.setFontSize(10)
  doc.setFont("helvetica", "normal")
  doc.setTextColor(0)
  doc.text(`Name: ${resultData.patientName}`, margin, y)
  doc.text(`ID: ${resultData.patientId}`, margin, y + 5)

  const status = CLASS_STATUS_MAP[resultData.class_index as keyof typeof CLASS_STATUS_MAP]
  const probabilityPercent = (resultData.probability * 100).toFixed(2)
  doc.text("Status:", pageWidth / 2 + 10, y)
  doc.setTextColor(status.color[0], status.color[1], status.color[2])
  doc.setFont("helvetica", "bold")
  doc.text(status.text, pageWidth / 2 + 25, y)

  doc.setTextColor(0)
  doc.setFont("helvetica", "normal")
  doc.text(`Confidence: ${probabilityPercent}%`, pageWidth / 2 + 10, y + 5)
  y += 15

  // --- SHAP Chart Section ---
  doc.setFontSize(12)
  doc.setFont("helvetica", "bold")
  doc.setTextColor(55, 65, 81)
  doc.text("Feature Impact on Prediction (Top 10)", margin, y)
  y += 8

  const sortedData = [...resultData.shap_values].sort((a, b) => b.value - a.value).slice(0, 10)
  const maxValue = sortedData.length > 0 ? sortedData[0].value : 0
  const chartWidth = pageWidth - margin * 2
  const barHeight = 6
  const barSpacing = 4

  doc.setFontSize(8)
  doc.setFont("helvetica", "normal")

  sortedData.forEach(item => {
    const label = PRETTY_FEATURE_NAMES[item.feature] || item.feature
    const barValueWidth = (item.value / maxValue) * (chartWidth * 0.6)

    doc.setTextColor(55, 65, 81)
    doc.text(label, margin + chartWidth * 0.38, y + barHeight / 2, { align: "right", baseline: "middle" })

    doc.setFillColor(139, 92, 246) // purple-500
    doc.rect(margin + chartWidth * 0.4, y, barValueWidth, barHeight, "F")

    doc.setTextColor(255)
    doc.text(item.value.toFixed(4), margin + chartWidth * 0.4 + 2, y + barHeight / 2, {
      baseline: "middle",
    })

    y += barHeight + barSpacing
    if (y > pageHeight - 30) {
      doc.addPage()
      y = margin
    }
  })

  y += 10

  // --- Footer ---
  doc.setDrawColor(220)
  doc.line(margin, y, pageWidth - margin, y)
  y += 8

  doc.setFontSize(8)
  doc.setTextColor(150)
  const disclaimer =
    "Disclaimer: This report is generated by an AI model and is intended for informational purposes only. It is not a substitute for professional medical advice, diagnosis, or treatment."
  const splitDisclaimer = doc.splitTextToSize(disclaimer, pageWidth - margin * 2)
  doc.text(splitDisclaimer, pageWidth / 2, y, { align: "center" })

  // --- Save ---
  doc.save(`Fetal_Health_Report_${resultData.patientId || "report"}.pdf`)
}